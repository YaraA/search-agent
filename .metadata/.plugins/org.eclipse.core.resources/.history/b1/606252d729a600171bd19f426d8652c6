import java.util.ArrayList;
import java.util.Random;


public class Grid {
	Cell[][] grid;
	int m;
	int n;
	
	public Grid(int m, int n, int pressurePads, int rocks, int obstacles){
		grid= new Cell[m][n];
		this.m =m;
		this.n= n; 
		for(int i=0; i<m; i++){
			for(int j=0; j<n; j++){
				grid[i][j]= new Blank(i,j);
			}
		}
		createCells(1,"T");
		createCells(pressurePads,"P");
		createCells(rocks,"R"); 
		createCells(obstacles,"O");
	}
	
	public void createCells(int noItems, String type){
		for(int k=0;k<noItems; k++){
			Random random = new Random();
			int i,j;
			do{
				i = random.nextInt(m);
				j = random.nextInt(n);
			}
			while(!(grid[i][j] instanceof Blank));
			switch(type){
				case "T": grid[i][j]= new Teleportal(i,j);break;
				case "R": grid[i][j]= new Rocks(i,j);break;
				case "P": grid[i][j]= new PressurePads(i,j);break;
				case "O": grid[i][j]= new Obstacles(i,j);break;
			}	
		}
	}
	
	public boolean canMove(Cell currCell, Operator o){ 
		//checks if cell lies on the edges of the grid
		return false;
		
		
	}
    public String toString(){
    	String result="";
        for(int i = 0;i <  7 * (m-1) ;i++){ 
        	result+="-";  
        }
        result+="-";
        result+="\n";

        for(int i = 1;i <= grid[m-1].length;i++){
        	result+="| %4d ";
        	result+= grid[m-1][i - 1].toString();       
         }
           result+="|";
           result+="\n";


             if(m-1 == n -  1){

         // when we reach the last row,
         // print bottom line "---------"

                for(int i = 0;i <  7 * n ;i++){ 
                	result+="-";
                 }
                result+="-";
                result+="\n";

              }
			return result;
}

	public static void main (String[]args){
		
		//System.out.println(random.nextInt(5 + 1 - 1) + 1);
		Grid x= new Grid(12,12,3,3,4);
		System.out.println(x.toString());
		
	}


}
